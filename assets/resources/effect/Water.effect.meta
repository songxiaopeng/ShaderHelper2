{
  "ver": "1.0.22",
  "uuid": "b0439db2-2385-4dfb-9b23-9aa1756b4d08",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 uv0;\nvoid main () {\n    vec4 pos = vec4(a_position, 1);\n\n      pos = cc_matViewProj * pos;\n\n    gl_Position = pos;\n    uv0 = a_uv0;\n}\n",
        "frag": "\nprecision highp float;\n\nuniform sampler2D texture;\n\nuniform vec4 iResolution;\nuniform float time;\nvarying vec2 uv0;\n\nvec2 s(vec2 p)\n{\n    float d=time*0.2,x=8.*(p.x+d),y=8.*(p.y+d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 rs = iResolution.xy;\n\n    vec2 uv = fragCoord;\n    vec2 q = uv+2./iResolution.x*(s(uv)-s(uv+rs));\n\n    fragColor = texture2D(texture, q);\n}\nvoid main()\n{\n    mainImage(gl_FragColor, uv0.xy);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec2 a_uv0;\nout vec2 uv0;\nvoid main () {\n    vec4 pos = vec4(a_position, 1);\n\n      pos = cc_matViewProj * pos;\n\n    gl_Position = pos;\n    uv0 = a_uv0;\n}\n",
        "frag": "\nprecision highp float;\n\nuniform sampler2D texture;\n\nuniform 1{\n  vec4 iResolution;\n\n  float time;\n}\n\nin vec2 uv0;\n\nvec2 s(vec2 p)\n{\n    float d=time*0.2,x=8.*(p.x+d),y=8.*(p.y+d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 rs = iResolution.xy;\n\n    vec2 uv = fragCoord;\n    vec2 q = uv+2./iResolution.x*(s(uv)-s(uv+rs));\n\n    fragColor = texture2D(texture, q);\n}\nvoid main()\n{\n    mainImage(gl_FragColor, uv0.xy);\n}\n"
      }
    }
  ],
  "subMetas": {}
}