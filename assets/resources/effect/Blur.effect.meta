{
  "ver": "1.0.22",
  "uuid": "b8c51703-a7da-458c-9825-2c3f8aea3c72",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\n  attribute vec3 a_position;\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 uv0;\n  void main () {\n    vec4 pos = cc_matViewProj * vec4(a_position, 1);\n    gl_Position = pos;\n    uv0 = a_uv0;\n  }\n\n",
        "frag": "\nprecision highp float;\n\nuniform sampler2D texture;\nvarying vec2 uv0;\n\nuniform float light;\nuniform float num;\nvec4 draw(vec2 uv) {\n    return  texture2D(texture,uv).rgba; \n}\n\nfloat grid(float var, float size) {\n    return floor(var*size)/size;\n}\n\n  vec4 dim(vec4 col, float factor) {\n    return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n  }\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main()\n{\n\n    vec4 blurred_image = vec4(0.);\n\n    for (float i = 0.; i < 5.; i++) {\n\n        vec2 q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i,uv0.x+uv0.y))+num); \n        vec2 uv2 = uv0+(q*num);\n        blurred_image += draw(uv2)/2.;\n\n        q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i+2.,uv0.x+uv0.y+24.))+num); \n        uv2 = uv0+(q*num);\n        blurred_image += draw(uv2)/2.;\n    }\n\n    blurred_image /= 5.;\n\n    blurred_image = dim(blurred_image, light);\n\n    gl_FragColor = vec4(blurred_image);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\n  in vec3 a_position;\n  in mediump vec2 a_uv0;\n  out mediump vec2 uv0;\n  void main () {\n    vec4 pos = cc_matViewProj * vec4(a_position, 1);\n    gl_Position = pos;\n    uv0 = a_uv0;\n  }\n\n",
        "frag": "\nprecision highp float;\n\nuniform sampler2D texture;\nin vec2 uv0;\n\nuniform LIGHT {\n\n  float light;\n  float num;\n\n}\n\nvec4 draw(vec2 uv) {\n    return  texture2D(texture,uv).rgba; \n}\n\nfloat grid(float var, float size) {\n    return floor(var*size)/size;\n}\n\n  vec4 dim(vec4 col, float factor) {\n    return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n  }\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main()\n{\n\n    vec4 blurred_image = vec4(0.);\n\n    for (float i = 0.; i < 5.; i++) {\n\n        vec2 q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i,uv0.x+uv0.y))+num); \n        vec2 uv2 = uv0+(q*num);\n        blurred_image += draw(uv2)/2.;\n\n        q = vec2(cos(degrees((i/5.)*360.)),sin(degrees((i/5.)*360.))) * (rand(vec2(i+2.,uv0.x+uv0.y+24.))+num); \n        uv2 = uv0+(q*num);\n        blurred_image += draw(uv2)/2.;\n    }\n\n    blurred_image /= 5.;\n\n    blurred_image = dim(blurred_image, light);\n\n    gl_FragColor = vec4(blurred_image);\n}\n"
      }
    }
  ],
  "subMetas": {}
}