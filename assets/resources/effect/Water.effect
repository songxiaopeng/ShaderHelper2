// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
CCEffect %{
  techniques: 
  - passes: 
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties: 
        texture: { value: white }
        iResolution: { value: [1280,720,0,0], inspector: { type: vec4 } }
        time: { value: 1.0, inspector: { type: float } }
}%

CCProgram vs %{

precision highp float;
#include <cc-global>
#include <cc-local>

in vec3 a_position;
in vec2 a_uv0;
out vec2 uv0;
void main () {
    vec4 pos = vec4(a_position, 1);
    // #if CC_USE_MODEL
      // pos = cc_matViewProj * cc_matWorld * pos;
    //   #else
      pos = cc_matViewProj * pos;
    // #endif
    gl_Position = pos;
    uv0 = a_uv0;
}
}%

CCProgram fs %{

precision highp float;

uniform sampler2D texture;

uniform 1{
  vec4 iResolution;

  float time;
}
// uniform vec3 iResolution;
// uniform float time;
// varying vec2 uv0;
in vec2 uv0;
#define F cos(x-y)*cos(y),sin(x+y)*sin(y)

vec2 s(vec2 p)
{
    float d=time*0.2,x=8.*(p.x+d),y=8.*(p.y+d);
    return vec2(F);
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // 换成resolution
    vec2 rs = iResolution.xy;
    // 换成纹理坐标v_texCoord.xy
    vec2 uv = fragCoord;
    vec2 q = uv+2./iResolution.x*(s(uv)-s(uv+rs));
    //反转y
    //q.y=1.-q.y;
    fragColor = texture2D(texture, q);
}
void main()
{
    mainImage(gl_FragColor, uv0.xy);
}
}%
